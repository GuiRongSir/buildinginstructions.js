<!DOCTYPE html>
<html>
 <head>
  <link href="css/index.css" rel="stylesheet" type="text/css">
  <link href="css/preview.css" rel="stylesheet" type="text/css">
  <meta name="viewport" content="width=device-width" />
 </head>
 <body>
  <div id="canvas_holder" style="position:relative;top:0">
   <canvas id="canvas"></canvas>
  </div>
  <script src="js/jquery.min.js"></script>
  <script src="js/three.min.js"></script>
  <script src="js/OrbitControls.js"></script>
  <script src="js/colors.js"></script>
  <script src="js/Scene.js"></script>    
  <script src="js/LDRGenerator.js"></script>
  <script src="js/LDRColorMaterials.js"></script>
  <script src="js/LDRGeometries.js"></script>
  <script src="js/LDRLoader.js"></script>
  <script src="js/LDRStuds.js"></script>
  <script>
      let model = '4032a.dat';

      let canvas = document.getElementById('canvas');
      let scene = new ENV.Scene(canvas);

      let onWindowResize = () => scene.onChange(window.innerWidth, window.innerHeight);

      let ldrLoader; // Three.js loader for LDraw models
      let onLoad = function() {
        let inv = new THREE.Matrix3(); inv.set(1,0,0, 0,-1,0, 0,0,-1); // Invert Y, and Z-axis for LDraw

        ldrLoader.getMainModel().generateThreePart(ldrLoader, 1, new THREE.Vector3(), inv, true, false, scene.mc);
        scene.buildOMRScene();

        onWindowResize();

        scene.mc.updateMeshVisibility(); // Hide lines
        setTimeout(() => LDR.Colors.loadTextures(() => scene.render()), 200);
        scene.repositionFloor(0.001);
        scene.render();
      }

      var ldrOptions = {};
      ldrOptions.lineContrast = 2; // No lines.
      ldrOptions.studs = 2; // Logos are made using textures

      let storage;
      LDR.Studs.makeGenerators('', 0, 2);
      storage = {
        retrievePartsFromStorage: (loader, toBeFetched, onDone) => {
          let retrieved = [];
          function attemptGeneratorFirst(id) {
            let pt = LDR.Generator.make(id);
            if(pt) {
              loader.partTypes[id] = pt;
              pt.steps.forEach(step => step.subModels.forEach(sm => attemptGeneratorFirst(sm.ID)));
              retrieved.push(id);
            }
            else {
              loader.load(id);
            }
          }
          toBeFetched.forEach(attemptGeneratorFirst);
          onDone(retrieved);
        }
      };

      ldrLoader = new THREE.LDRLoader(onLoad, storage, {physicalRenderingAge:20});
      ldrLoader.load(model);
  </script>
 </body>
</html>
