<!DOCTYPE html>
<html>
 <head>
  <link href="../css/index.css" rel="stylesheet" type="text/css">
  <link href="../css/preview.css" rel="stylesheet" type="text/css">
  <meta name="viewport" content="width=device-width" />
 </head>
 <body>
  <script src="../js/jquery.min.js"></script>
  <script src="../js/three.min.js"></script>
  <script src="../js/OrbitControls.js"></script>
  <script src="../js/colors.js"></script>
  <script src="../js/LDRShaders.js"></script>    
  <script src="../js/LDRGenerator.js"></script>
  <script src="../js/LDRColorMaterials.js"></script>
  <script src="../js/LDRGeometries.js"></script>
  <script src="../js/LDRLoader.js"></script>
  <script src="../js/LDRStuds.js"></script>
  <script>
      let ldrLoader;

      var acceptedColors = [1, 2, 4, 5, 13, 14, 19, 22, 25, 27, 69, 71, 72, 73, 74, 77, 288, 308, 484];
      LDR.LDRGeometry.prototype.fromStepX = function(loader, step) {
        let geometries = [];

        ///console.dir(step);
        step.quads.forEach(quad => quad.c = acceptedColors[Math.floor(Math.random() * acceptedColors.length)]);
        step.triangles.forEach(triangle => triangle.c = acceptedColors[Math.floor(Math.random() * acceptedColors.length)]);
        step.subModels.forEach(sm => sm.c = acceptedColors[Math.floor(Math.random() * acceptedColors.length)]);

        if(step.hasPrimitives) {
            let g = new LDR.LDRGeometry();
    	    g.fromPrimitives(step.lines, step.conditionalLines, step.triangles, step.quads);
            geometries.push(g);
        }

        function handleSubModel(subModel) {
            let g = new LDR.LDRGeometry(); 
	    g.fromPartDescription(loader, subModel);
            geometries.push(g);
        }
        step.subModels.forEach(handleSubModel);
        this.replaceWith(LDR.mergeGeometries(geometries));
      }

      //let model = '6092p01.dat';
      let model = 'test_texmap.dat';

      // Set up camera:
      let camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 1000000);
      camera.position.set(10000, 7000, 10000);
      camera.lookAt(new THREE.Vector3());

      // Set up scene:
      let scene = new THREE.Scene();
      scene.background = new THREE.Color(0xFFFFFF);

      let baseObject = new THREE.Group(), opaqueObject = new THREE.Group(), sixteenObject = new THREE.Group(); transObject = new THREE.Group();
      baseObject.add(opaqueObject); // Draw non-trans before trans.
      baseObject.add(sixteenObject);
      baseObject.add(transObject);
      scene.add(baseObject);
      let mc = new LDR.MeshCollector(opaqueObject, sixteenObject, transObject);

      // Set up renderer:
      let renderer = new THREE.WebGLRenderer({antialias: true});
      renderer.setPixelRatio(window.devicePixelRatio);
      function render() {
        renderer.render(scene, camera);
      }
      document.body.appendChild(renderer.domElement);

      function onWindowResize(){
        camera.left = -window.innerWidth;
        camera.right = window.innerWidth;
        camera.top = window.innerHeight;
        camera.bottom = -window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
        render();
      }

      // React to user input:
      let controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.addEventListener('change', render);
      window.addEventListener('resize', onWindowResize, false);

      let onLoad = function() {
        ldrLoader.generate(16, mc);

        // Find center of drawn model:
        let b = mc.boundingBox;
        let elementCenter = new THREE.Vector3();
        b.getCenter(elementCenter);
        baseObject.position.set(-elementCenter.x, -elementCenter.y, -elementCenter.z);
        //baseObject.add(new THREE.Box3Helper(b, 0x0000FF)); // Uncomment if you want to see the bounding box

	camera.zoom = window.innerWidth/b.min.distanceTo(b.max);
        onWindowResize();
      }

      let idToUrl = id => ['../ldraw_parts/' + id,
                           '../ldraw_unofficial/' + id,
                           '../ldraw_parts/s/' + id,
                           '../ldraw_unofficial/s/' + id
                          ];
      let idToTextureUrl = id => '../textures/'+id;

      ldrLoader = new THREE.LDRLoader(onLoad, null, {idToUrl:idToUrl, idToTextureUrl:idToTextureUrl, onProgress:onWindowResize});
      ldrLoader.load(model);
  </script>
 </body>
</html>
