<!DOCTYPE html>
<html>
 <head>
    <meta charset=utf-8>
    <title>Studio 2 LDraw - Convert your Studio 2.0 custom parts to LDraw</title>
    <meta name="viewport" content="width=device-width" />
    <style>
      body {
        font-family: "Arial","Helvetica",sans-serif;
        padding: 0;
        margin: 0;
        background-color: #EEE;
      }
      h1, h3 {
        text-transform: uppercase;
        display: block;
        text-align: center;
        margin: 0;
        padding: 0.5em;
        font-size: 2em;
      }
      h1 {
        background-color: #000;
        color: white;
      }
      h3 {
        background-color: #D99;
      }
      .section {
        display: block;
        margin: 0.5em;
      }
      .desc {
        margin: 0.5em;
      }
      .choice {
        display: table;
        margin: 0.5em;
      }
      .choice, textarea, button {
        display: block;
        width: 95%;
      }
      button {
        height: 4em;
      }
      #contact {
        margin: 2em;
        text-align: center;
      }
      .error, .warning {
        display: block;
        margin: 1em;
        padding: 0.5em;
        font-weight: bold;
      }
      .error {
        border: 0.2em solid red;
      }
      .warning {
        border: 0.2em solid orange;
      }
      canvas {
        display: block;
        margin: auto;
      }
    </style>
 </head>
 <body>
    <script src="js/jquery.min.js"></script>
    <script src="js/three.min.js"></script>
    <script src="js/OrbitControls.js"></script>
    <script src="js/colors.js"></script>
    <script src="js/ClientStorage.js"></script>
    <script src="js/LDROptions.js"></script>
    <script src="js/LDRShaders.js"></script>
    <script src="js/LDRColorMaterials.js"></script>
    <script src="js/LDRGeometries.js"></script>
    <script src="js/LDRLoader.js"></script>
    <script src="js/LDRGenerator.js"></script>
    <script src="js/LDRStuds.js"></script>
    <script src="js/StudioTexmap.js"></script>
  
    <h1>Studio2LDraw - Convert your textured custom parts from Studio 2.0 to LDraw</h1>

    <h3>step 1 - Select the file from Studio 2.0 or Part Designer</h3>
  <div class="section">
   <span class="desc">
     After exporting to LDraw from Studio 2.0 or Part Designer, you can either select the file or paste the content below.
   </span>
   <span class="choice">
    <label for="file">.ldr file exported from <b>Studio 2.0</b> or <b>Part Designer</b></label>
    <input id="file" name="file" type="file" onchange="readFromFile(event);" />
   </span>
   <span class="choice">
    <textarea id="file_content" onkeyup="convert(null)" rows="8">
0 FILE sample_file.dat
0 BFC NOCERTIFY CCW
0 PE_TEX_INFO iVBORw0KGgoAAAANSUhEUgAAAAIAAAACCAIAAAD91JpzAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH5AEYChQ1nEYzVAAAAB1pVFh0Q29tbWVudAAAAAAAQ3JlYXRlZCB3aXRoIEdJTVBkLmUHAAAAFklEQVQI12N4KqUh5fWUQcrr6VMpDQAiEgThLKLB4AAAAABJRU5ErkJggg==

1 16 0 -24 0 1 0 0 0 1 0 0 0 1 s/3005s01.dat
3 16 -10 -24 -10 -10 0 -10 10   0 -10  0.1 0.8   0.1 0.2  0.99 0.2
3 16 -10 -24 -10  10 0 -10 10 -24 -10  0.1 0.8  0.99 0.2  0.99 0.8
</textarea>
   </span>

   <div id="warnings"></div>
   <div id="errors"></div>

   <canvas id="preview"></canvas>
  </div>

<!--  <h3>Step 2 - Inline or Separate Image File</h3>
  <div class="section">
   <span class="desc">
     LDraw supports two ways of storing texture files: Either as separate PNG files in the 'textures' folder, or inlined in the LDraw file.
   </span>
   <span class="choice">
    <label for="inline">Check this box for inlining the PNG file: </label>
    <input id="inline" name="inline" type="checkbox" checked="checked" onchange="convert(null);" />
   </span>
  </div>
-->
  <h3>Step 2 - Get the Standardized LDraw File</h3>
  <div class="section">
   <div id="preview2"></div>
   <span class="choice">
     <textarea id="ldr_result" rows="10"></textarea>
     <button onclick="copyToClipboard();">Copy LDraw File to Clipboard</button>
   </span>
  </div>

  <div id="contact">
    <a href="https://github.com/LasseD/buildinginstructions.js">Studio 2 LDraw is part of buildinginstructions.js</a> which is in the public domain and may be freely distributed.
    <a href="https://github.com/mrdoob/three.js">three.js and OrbitControls.js</a> use the MIT license.
    Contact: Lasse Deleuran on <a href="mailto:lasse.deleuran@gmail.com">lasse.deleuran@gmail.com</a>.
  </div>

  <script>
/*
  Warnings and errors:
 */
function resetWarningsAndErrors() {
  $('#warnings').empty();
  $('#errors').empty();
}
function onWarning(obj) {
  let message = obj.message + ' on line ' + obj.line;

  console.dir(obj);

  message = message.replace('<', '&lt;');

  var span = document.createElement('span');
  span.setAttribute('class', 'warning');
  span.innerHTML = message;
  $('#warnings').append(span);
}
function onError(obj) {
  var span = document.createElement('span');
  span.setAttribute('class', 'error');
  span.innerHTML = obj.message;
  $('#errors').empty().append(span);
}

/*
  three.js rendering:
 */
var ldrOptions = new LDR.Options(); // Determine how to show lines. Change this in sample_instruction.htm

// Set up camera:
var camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 1000000);
camera.position.set(10000, 7000, 10000);
camera.lookAt(new THREE.Vector3());

// Set up scene:
var scene = new THREE.Scene();
scene.background = new THREE.Color(0xFFFFFF);
var baseObject;

// Set up renderer:
let canvas = document.getElementById('preview');
var renderer = new THREE.WebGLRenderer({antialias:true, canvas:canvas});
renderer.setPixelRatio(window.devicePixelRatio);

function render() {
  renderer.render(scene, camera);
}

var w, h;
function onWindowResize(){
  w = window.innerHeight * 0.7;
  h = window.innerWidth * 0.7;
  w = h = Math.min(w, h);
  camera.left = -w;
  camera.right = w;
  camera.top = h;
  camera.bottom = -h;
  camera.updateProjectionMatrix();
  renderer.setSize(w, h);
  render();
}
window.addEventListener('resize', onWindowResize, false);
onWindowResize();

// React to user input:
let controls = new THREE.OrbitControls(camera, renderer.domElement);
controls.addEventListener('change', render);

let ldrLoader, storage;

function onLoad() {
    if(!ldrLoader.mainModel) {
      console.log('A valid model was not parsed. Nothing will be shown');
      return;
    }
    if(baseObject) {
      scene.remove(baseObject);
    }
    baseObject = new THREE.Group();
    scene.add(baseObject);

    var mc = new LDR.MeshCollector(baseObject, baseObject);
    ldrLoader.generate(16, mc);

    // Find center of drawn model:
    var b = mc.boundingBox;
    var elementCenter = new THREE.Vector3();
    b.getCenter(elementCenter);
    baseObject.position.set(-elementCenter.x, -elementCenter.y, -elementCenter.z);

    camera.zoom = w/b.min.distanceTo(b.max)*2;
    onWindowResize();

    // LDraw content:
    var lDrawContent = ldrLoader.toLDR();
    $('#ldr_result').val(lDrawContent);
}

function show(ldr) {
    LDR.TexmapPlacements = [];
    ldrLoader = new THREE.LDRLoader(onLoad, storage, {onError:onError, onWarning:onWarning, onProgress:render, saveFileLines:true});
    ldrLoader.parse(ldr, 'main.dat');
}

/*
  Converting
 */
function convert(ldr) {
  resetWarningsAndErrors();

  if(!ldr) { // Fetch from text area:
    ldr = $('#file_content')[0].value;
  }
  else { // Update text area:
    $('#file_content').val(ldr);
  }
  show(ldr);
}

function readFromFile(event) {
  var reader = new FileReader();
  reader.onload = function(){
    convert(reader.result);
  };
  reader.readAsText(event.target.files[0]);
}

function copyToClipboard() {
  $('#ldr_result')[0].select();
  document.execCommand('copy');
}

$(document).ready(function() {
  convert();
});
  </script>
 </body>
</html>
