<!DOCTYPE html>
<html>
 <head>
  <meta charset=utf-8>
  <title>Sample Render</title>
  <meta name="viewport" content="width=device-width" />
 </head>
 <body>
  <script id="vertexShader" type="x-shader/x-vertex">
precision highp float;
precision mediump int;

uniform vec4 color;
uniform float centerDist;
uniform mat4 projectionMatrix;
uniform mat4 modelViewMatrix;

attribute vec3 position;

varying vec4 vColor;
varying float cameraDist;

void main(){
    vColor = color;
    vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
    cameraDist = (mvPosition.z - centerDist) / 1000000.0;;
    gl_Position = projectionMatrix * mvPosition;
}
  </script>
  <script id="fragmentShader" type="x-shader/x-fragment">
      #include <packing>

      varying vec4 vColor;
      varying vec2 vUv;

      uniform sampler2D tDepth;
      uniform float cameraNear;
      uniform float cameraFar;

      float readDepth( sampler2D depthSampler, vec2 coord ) {
        float fragCoordZ = texture2D( depthSampler, coord ).x;
        float viewZ = perspectiveDepthToViewZ( fragCoordZ, cameraNear, cameraFar );
        return viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );
      }

      void main() {
        float depth = readDepth( tDepth, vUv );
        gl_FragColor = color;//.rgb = 1.0 - vec3( depth );
        gl_FragColor.a = depth;
      }
    </script>
    <script src="js/three.min.js"></script>
    <script src="js/OrbitControls.js"></script>
    <script src="js/colors.js"></script>
    <script src="js/ClientStorage.js"></script>
    <script src="js/LDROptions.js"></script>
    <script src="js/LDRShaders.js"></script>
    <script src="js/LDRColorMaterials.js"></script>
    <script src="js/LDRGeometries.js"></script>
    <script src="js/LDRLoader.js"></script>
    <script src="js/LDRGenerator.js"></script>
    <script src="js/LDRStuds.js"></script>
    <script>
      let camera, target;

      LDR.Colors.buildTriangleMaterial = function(colorManager, color) {
        colorManager = colorManager.clone();
        colorManager.overWrite(color);
        let colors = colorManager.shaderColors;
        let len = colors.length;

        let uniforms = {tDepth: {value: target.depthTexture}};
        if(LDR.Colors.canBeOld) {
	    uniforms['old'] = {value: false};
        }
        if(len > 1) {
	    uniforms['colors'] = {type: 'v4v', value: colors};
        }
        else {
	    uniforms['color'] = {type: 'v4', value: colors[0]};
        }
        let ret = new THREE.RawShaderMaterial({
            side: THREE.DoubleSide,
            //side: THREE.FrontSide,
	    uniforms: uniforms,
            vertexShader: document.getElementById('vertexShader').textContent,
            fragmentShader: document.getElementById('fragmentShader').textContent,
	    transparent: true//colorManager.containsTransparentColors()
        });
        ret.colorManager = colorManager;
        return ret;
      }

      //let model = 'models/corvette_full.mpd';
      let model = '3024.dat';

      // Set up camera:
      camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 1000000);
      camera.position.set(10000, 7000, 10000);
      camera.lookAt(new THREE.Vector3());

      // Set up scene:
      let scene = new THREE.Scene();
      scene.background = new THREE.Color(0xFFFFFF);

      // Depth texture for transparent parts:
      target = new THREE.WebGLRenderTarget( window.innerWidth, window.innerHeight );
      target.texture.format = THREE.RGBFormat;
      target.texture.minFilter = THREE.NearestFilter;
      target.texture.magFilter = THREE.NearestFilter;
      target.texture.generateMipmaps = false;
      target.stencilBuffer = false;
      target.depthBuffer = true;
      target.depthTexture = new THREE.DepthTexture();
      target.depthTexture.type = THREE.ShortType;

      let baseObject = new THREE.Group(), opaqueObject = new THREE.Group(), transObject = new THREE.Group();
      baseObject.add(opaqueObject); // Draw non-trans before trans.
      baseObject.add(transObject);
      scene.add(baseObject);
      let mc = new LDR.MeshCollector(opaqueObject, transObject);

      // Set up renderer:
      let renderer = new THREE.WebGLRenderer({antialias: true});
      renderer.setPixelRatio(window.devicePixelRatio);
      function render() {
        renderer.render(scene, camera);
      }
      document.body.appendChild(renderer.domElement);

      function onWindowResize(){
        camera.left = -window.innerWidth;
        camera.right = window.innerWidth;
        camera.top = window.innerHeight;
        camera.bottom = -window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
        render();
      }

      // React to user input:
      let controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.addEventListener('change', render);
      window.addEventListener('resize', onWindowResize, false);

      // Three.js loader for LDraw models:
      let ldrLoader;

      let onLoad = function() {
        let mainModel = ldrLoader.getMainModel(); // Main model from the LDraw file (first model encountered)

        // Place model in scene:
        let origo = new THREE.Vector3();
        let inv = new THREE.Matrix3(); 
        inv.set(1,0,0, 0,-1,0, 0,0,-1); // Invert Y, and Z-axis for LDraw

        // Generate the mesh:
        mainModel.generateThreePart(ldrLoader, 4, origo, inv, true, false, mc);

        // Find center of drawn model:
        let b = mc.boundingBox;
        let elementCenter = new THREE.Vector3();
        b.getCenter(elementCenter);
        baseObject.position.set(-elementCenter.x, -elementCenter.y, -elementCenter.z);

	camera.zoom = window.innerWidth/b.min.distanceTo(b.max);
        onWindowResize();
      }

      let storage;
      let ldrOptions = new LDR.Options(); // Determine how to show lines, studs, and logos. Change options using sample_instruction.htm

      let onStorageReady = function() {
        ldrLoader = new THREE.LDRLoader(onLoad, storage);
        LDR.Studs.setStuds(ldrLoader, ldrOptions.studHighContrast, 
                           ldrOptions.studLogo, () => ldrLoader.load(model));
      }
      storage = new LDR.STORAGE(onStorageReady);
 </script>
 </body>
</html>
