<!DOCTYPE html>
<html>
 <head>
  <title>Sample Rendering with Physical Properties</title>
  <link href="css/index.css" rel="stylesheet" type="text/css">
  <link href="css/preview.css" rel="stylesheet" type="text/css">
  <link href="css/color_picker.css" rel="stylesheet" type="text/css">
  <meta name="viewport" content="width=device-width" />
 </head>
 <body>
  <div id="canvas_holder" style="position:relative;top:0">
   <canvas id="canvas"></canvas>
   <p id="loading_text" style="display:block;position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);color:white;">Loading...</p>
   <div id="color_button" onclick="$('#color_picker_background, #color_picker_holder').fadeIn(250)"></div>
  </div>
  <div id="color_picker">
   <div id="color_picker_background" class="background" onclick="$('#color_picker').hide();"></div>
   <div id="color_picker_holder" class="holder"></div>
  </div>
  <script src="js/jquery.min.js"></script>
  <script src="js/three.min.js"></script>
  <script src="js/OrbitControls.js"></script>
  <script src="js/colors.js"></script>
  <!--<script src="js/RectAreaLightUniformsLib.js"></script>-->
  <script src="js/Scene.js"></script>    
  <script src="js/ClientStorage.js"></script>
  <script src="js/LDROptions.js"></script>
  <script src="js/LDRShaders.js"></script>
  <script src="js/LDRGenerator.js"></script>
  <script src="js/LDRColorMaterials.js"></script>
  <script src="js/LDRGeometries.js"></script>
  <script src="js/LDRLoader.js"></script>
  <script src="js/LDRStuds.js"></script>
  <script src="js/LDRColorPicker.js"></script>
  <script>
      let startTime = new Date();

      // Test models:
      //let model = 'models/corvette_full.mpd';
      //let model = '6091.dat'; // Has overlap of line and conditional line causing trouble for the normal calculation.
      //let model = '85080.dat'; // Has conditional lines partially overlapping with hard corners, also causing issues for normal calculation.
      //let model = '50950.dat';
      //let model = '3820.dat';
      //let model = '41747ps1.dat';
      //let model = 'models/mf.mpd';
      let model = 'box.dat';

      // Materials:
      //let model = 'models/luminance.ldr';
      //let model = 'models/chrome.ldr';
      //let model = 'models/rubber.ldr';
      //let model = 'models/speckle.ldr';
      //let model = 'models/metal.ldr';
      //let model = 'models/glitter.ldr';
      //let model = 'models/pearlescent.ldr';
      //let model = 'models/trans.ldr';

      let canvas = document.getElementById('canvas');
      let scene = new ENV.Scene(canvas);

      let onWindowResize = () => scene.onChange(window.innerWidth, window.innerHeight);
      window.addEventListener('resize', onWindowResize, false);

      let ldrLoader; // Three.js loader for LDraw models
      let onLoad = function() {
        document.getElementById('loading_text').style.display = 'none';
        console.log("Data loaded after " + (new Date()-startTime) + "ms.");
        let inv = new THREE.Matrix3(); inv.set(1,0,0, 0,-1,0, 0,0,-1); // Invert Y, and Z-axis for LDraw
        ldrLoader.getMainModel().generateThreePart(ldrLoader, 16, new THREE.Vector3(), inv, true, false, scene.mc);
        scene.mc.updateMeshVisibility(); // Hide lines

        scene.buildStandardScene();
        onWindowResize(); // Render

        console.log("Initial non-textured render loaded after " + (new Date()-startTime) + "ms.");

        function onTextureLoaded() {
          scene.render();
          console.log("Texture loaded after " + (new Date()-startTime) + "ms.");
        }
        setTimeout(() => LDR.Colors.loadTextures(onTextureLoaded), 200);
      }

      var ldrOptions = new LDR.Options();
      ldrOptions.lineContrast = 2; // No lines.
      let logo = ldrOptions.studs = 0; // 0 for quick draw. 4 for special logo.

      let storage;
      LDR.Studs.makeGenerators('', 0, logo);
      storage = {
        retrievePartsFromStorage: (loader, toBeFetched, onDone) => {
          let retrieved = [];
          function attemptGeneratorFirst(id) {
            let pt = LDR.Generator.make(id);
            if(pt) {
              loader.partTypes[id] = pt;
              pt.steps.forEach(step => step.subModels.forEach(sm => attemptGeneratorFirst(sm.ID)));
              retrieved.push(id);
            }
            else {
              loader.load(id);
            }
          }
          toBeFetched.forEach(attemptGeneratorFirst);
          onDone(retrieved);
        }
      };

      ldrLoader = new THREE.LDRLoader(onLoad, storage, {physicalRenderingAge:20});
      ldrLoader.load(model);

      // Color setup:
      let colorPicker = new LDR.ColorPicker(setColor);
    
      function setColor(idx) {
        if(idx === undefined) {
	  return;
	}
        let color = LDR.Colors[idx];

        let buttonEle = document.getElementById('color_picker_button');
        colorPicker.decorateEle(buttonEle, color, idx);

        console.log('setting color ' + idx);

        LDR.Colors[16].m.color = new THREE.Color(LDR.Colors[idx].value); // Set main color.
        //LDR.Colors[16].m.needsUpdate = true;
        scene.render();
      }

      let colorButton = colorPicker.createButton();
      document.getElementById('color_button').append(colorButton);
  </script>
 </body>
</html>
